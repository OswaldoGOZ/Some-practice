

# 1 Escribir un programa que pregunte al usuario su edad y muestre por pantalla si es mayor de edad o no.

from ast import Break, Continue
from pickle import TRUE


edad = int(input ("ingrese su edad\n  "))
if edad >= 18:
    print ("eres mayor de edad")
else:
    print ("NO eres mayor de edad")

# 2 Escribir un programa que almacene la cadena de caracteres contraseña en una variable, pregunte al usuario por 
# la contraseña e imprima por pantalla si la contraseña introducida por el usuario coincide con la guardada en la 
# variable sin tener en cuenta mayúsculas y minúsculas.

clave = "movieka"
password = (input("Ingrese contraseña\n"))
passcon = password.lower()

if clave == passcon:
    print ("CONTRASEÑA CORRECTA")
else:
    print ("ACCESO DENEGADO")

# 3- Escribir un programa que pida al usuario dos números y muestre por pantalla su división. 
# Si el divisor es cero el programa debe mostrar un error.

a = float(input("ingrese numerador\n"))
b = float(input("ingrese denominador\n"))

if b == 0:
    print ("ERROR")
else:
    c = a / b
    print ("a/b = " + str(c))

# 4- Escribir un programa que pida al usuario un número entero y muestre por pantalla si es par o impar.

num = int(input("ingrese un número entero: "))
if num == 0:
    print ("es cero")
if num == 1:
    print ("es 1")

cociente = int(num/2)              # se trabaja con la parte entera, por ejemplo 5/2 = 2
residuo = int(num - cociente*2)

if (residuo) == 0:
    print ("ES PAR")
else:
    print ("ES IMPAR")

# LA MANERA MÁS FACIL Y CONVENIENTE

if num % 2 == 0:
    print ("ES PAR")
else:
    print ("ES IMPAR CLARO")

# 5- Para tributar un determinado impuesto se debe ser mayor de 16 años y tener unos ingresos 
# iguales o superiores a 1000 € mensuales. Escribir un programa que pregunte al usuario su edad
#  y sus ingresos mensuales y muestre por pantalla si el usuario tiene que tributar o no

age = int(input ("ingrese su edad\n===> "))
income = float(input("escriba sus ingresos\n===> "))

if age > 16 and income >= 1000:
    print ("USTE DEBE TRIBUTAR")
else:
    print ("USTED NO TIENE QUE TRIBUTAR")

# 6- Los alumnos de un curso se han dividido en dos grupos A y B de acuerdo al sexo y el nombre. El grupo A 
# esta formado por las mujeres con un nombre anterior a la M y los hombres con un nombre posterior a la N y 
# el grupo B por el resto. Escribir un programa que pregunte al usuario su nombre y sexo, y muestre por pantalla 
# el grupo que le corresponde.

nombre = (input ("Escriba su nombre\n").lower ())

salir = input('introduce una letra ')
while salir != 'a':
    print('La letra no es la que busco que es a')
    salir = input('introduce una letra ') 


entrada = (input("Escriba H o m: "))   #THIS PART IS BAD, logic error by !=, review soon, must be AND instead of OR
while entrada != "H" or "M":
    entrada = (input("Escriba H o m: "))
 
    
if entrada == "M":
    if nombre[0] == "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "m":
        print (" mujer, letra anterior a M, GRUPO A")
    else:
        print (" mujer, letra posterior a M, GRUPO B")
if entrada == "H":
    if nombre[0] != "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "m" or "n":
        print (" hombre, letra posterior a N, GRUPO A")
    else:
        (" hombre, letra anterior a N, GRUPO B")
        

# 1- Escribir un programa que pida al usuario una palabra y la muestre por pantalla 10 veces.

word = input("escriba una palabra:\n")
count = 1
while (count <= 10):
    print ("{} -{}".format(count,word))
    count = count + 1

# 2- Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los 
# años que ha cumplido (desde 1 hasta su edad).

age = int(input("escriba su edad"))

for x in range (1,age + 1):
    print (x)
    x = x + 1

# 2- Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los 
# años que ha cumplido (desde 1 hasta su edad).

age = int(input("escriba su edad: "))

for x in range (1,age + 1):
    print (x)
    
# 3- Escribir un programa que pida al usuario un número entero positivo y muestre por 
# pantalla todos los números impares desde 1 hasta ese número separados por comas.

number = 0
while (number <= 0):
    number = int(input("Ingrese un entero positivo: "))

for x in range (1,number + 1):    # Otra manera de mostrar los pares sería: for x in range (1, number + 1, 2) ese dos significa un step o paso
    if x % 2 != 0:
        print (x, end=", ")

    if x == number:               # Esta parte es para que siga en otra linea al final, y no separado por coma el print
        print ("\n")
    else:
        continue
        
 # 7 - Escribir un programa que muestre por pantalla la tabla de multiplicar del 1 al 10.

for i in range(1,11):
    print ("Tabla de multiplicar del {}".format(i))
    Primer_num = i
    for j in range (1,11):
        print ("{} x {} = {}".format(str(i),str(j),str(i*j)))
    print ("\n")

# 8 - Escribir un programa que pida al usuario un número entero y muestre por pantalla un
# triángulo rectángulo como el de más abajo.

# 1
# 3 1
# 5 3 1
# 7 5 3 1
# 9 7 5 3 1

for i in range (1,10,2):
    for j in range (i,0,-2):
        print (str(j),end= " ")
    print ("\n")

# 9 - Escribir un programa que almacene la cadena de caracteres contraseña en una variable,
#  pregunte al usuario por la contraseña hasta que introduzca la contraseña correcta.

password = "0"
while (1):
    password = input ("ingrese su contraseña: \n\t\t")
    if password == "12345":
        print ("CORRECTO, Welcome")
        break
    else:
        print ("INCORRECTO, intente de nuevo")
        continue

#otra forma:
password = "0"
while (password != "12345"):
    password = input ("ingrese su contraseña nuevamente: \n\t\t")

# 10 - Escribir un programa que pida al usuario un número entero y muestre por
#  pantalla si es un número primo o no.

number = int(input("ingrese un número entero: "))

i = 2
while number%i != 0:
    i = i + 1
if i == number:
    print ("ES PRIMO")
else:
    print ("NO ES PRIMO")

# otra forma:

number = int(input("ingrese un número entero: "))

for i in range(2,number):
    if number%i == 0:
        break
if i + 1 == number:
    print ("ES PRIMO")
else:
    print ("NO ES PRIMO")

# 11 Escribir un programa que pida al usuario una palabra y luego muestre por pantalla una a una
#  las letras de la palabra introducida empezando por la última

word = input("Escriba una palabra: ")

reves = (word[::-1])
for i in reves:                     # Otra manera: for i in range(len(word)-1, -1, -1):
    print (i)

# 12 Escribir un programa en el que se pregunte al usuario por una frase y una letra,
#  y muestre por pantalla el número de veces que aparece la letra en la frase.

frase = input("escribe una frase\n")
letra = input("escribe una letra: ")

total = 0

for i in frase:
    if i == letra:
        total += 1
print ("La letra \"{}\" aparece {} veces en la frase: {} ".format(letra,str(total),frase))

    
# 13 Escribir un programa que muestre el eco de todo lo que el usuario introduzca hasta que
#  el usuario escriba “salir” que terminará.

algo = "xxx"

while algo != "salir":
    algo = input ("Escriba algo: ")
    for pos,i in enumerate(algo):
        write = (algo[pos::])
        print (write)
        
# 6- Escribir un programa que cree un diccionario vacío y lo vaya llenado con información sobre una persona 
# (por ejemplo nombre, edad, sexo, teléfono, correo electrónico, etc.) que se le pida al usuario. 
# Cada vez que se añada un nuevo dato debe imprimirse el contenido del diccionario.

datos_persona = {}

while(1):
    enter = input("¿desea introducir información, responda \"si\" o \"no\": ")
    if enter == "si":
        key = input("¿Qué dato desea agregar: ")
        datos_persona[key]= input(key + ": ")
        print(datos_persona)
        continue
    else:
        break
print("gracias, hasta pronto")

# OTRA FORMA, muy similar pero con una Interesante manera de condicionar un bucle while
#persona = {}
#continuar = True
#while continuar:
    #clave = input('¿Qué dato quieres introducir? ')
    #valor = input(clave + ': ')
    #persona[clave] = valor
    #print(persona)
    #continuar = input('¿Quieres añadir más información (Si/No)? ') == "Si"

# 7- Escribir un programa que cree un diccionario simulando una cesta de la compra. 
# El programa debe preguntar el artículo y su precio y añadir el par al diccionario, hasta que el usuario decida terminar.

Dicionarie = {}
#  Después se debe mostrar por pantalla la lista de la compra y el coste total, con el siguiente formato

# Lista de compra
# articulo 1       precio
# articulo 2       precio
#  ...
#Total             coste

cesta = {}
continuar = True
while continuar:
    key = input("introduzca el artículo\n")
    price = input("introduzca el precio de " + key + ": ")
    cesta[key]= price
    continuar = input("¿desea agregar otro artículo? responda si o no: ") == "si"
print ("Lista de compra:")
Total_art = 0
costo = 0
for k in cesta:
    print ("{0:<14}{1}".format(k,cesta[k]))
    Total_art += 1
    costo += float(cesta[k])
print ("Total: {0:<7}{1}".format(Total_art,costo))

# 8- Escribir un programa que cree un diccionario de traducción español-inglés. El usuario introducirá las palabras en español 
# e inglés separadas por dos puntos, y cada par <palabra>:<traducción> separados por comas. El programa debe crear 
# un diccionario con las palabras y sus traducciones. Después pedirá una frase en español y utilizará el diccionario 
# para traducirla palabra a palabra. Si una palabra no está en el diccionario debe dejarla sin traducir.

diccionario = {}
palabras = input ("\nintroduzca las palabras en español e inglés separadas por dos puntos, y cada par <palabra>:<traducción> separados por comas\n")
pares = palabras.split(",")

for i in pares:
    x = i.find(":")
    key = i[0:x:]
    valor =i[x+1::]
    diccionario[key]= valor
print (diccionario)

frase = input ("introduzca una frase en español\n")

for k in diccionario:
    frase = frase.replace(k,diccionario[k])
print (frase)



# Escribir un programa que permita gestionar la base de datos de clientes de una empresa. Los clientes se guardarán en un diccionario 
    # en el que la clave de cada cliente será su NIF, y el valor será otro diccionario con los datos del cliente 
    # (nombre, dirección, teléfono, correo, preferente), donde preferente tendrá el valor True si se trata de un cliente preferente. 
    # El programa debe preguntar al usuario por una opción del siguiente menú: 
    # (1) Añadir cliente, (2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, (5) Listar clientes preferentes,
    # (6) Terminar. En función de la opción elegida el programa tendrá que hacer lo siguiente:
# 1 Preguntar los datos del cliente, crear un diccionario con los datos y añadirlo a la base de datos.
# 2 Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.
# 3 Preguntar por el NIF del cliente y mostrar sus datos.
# 4 Mostrar lista de todos los clientes de la base datos con su NIF y nombre.
# 5 Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.
# 6 Terminar el programa.

clientes = {}
menu = 0

while (1):
    menu = int(input("Bienvenido al sistema de gestión de clientes. Elija una opción:\n (1) Añadir cliente, (2) Eliminar cliente, (3) Mostrar cliente,\n (4) Listar todos los clientes, (5) Listar clientes preferentes, (6)Terminar el programa."))
    if menu == 1:
        clienteNIF = {}
        print("Ud seleccionó añadir cliente, introduzca los datos: ")
        NIF = input("NIF: ")
        nombre = input("Nombre: ")
        direccion = input("Dirección: ")
        telf = input("teléfono: ")
        correo = input("correo: ")
        preferente = input("preferente (1), no preferente (0): ")
        if preferente == "1":
            preferente = True
        if preferente == "0":
            preferente = False
        clienteNIF["Nombre"] =nombre      # aqui se forma el dicionario con los datos del cliente
        clienteNIF["Dirección"] =direccion
        clienteNIF["Teléfono"] =telf
        clienteNIF["Correo"] =correo
        clienteNIF["Preferente"] =preferente

        clientes[NIF] = clienteNIF       # el diccionario con los datos del cliente se agrega como valor en el diccionario "clientes" con clave NIF
        print(clientes[NIF])
        continue
    if menu == 2:
        NIF = input("Ud seleccionó eliminar cliente. \nIntroduzca NIF de cliente a eliminar: ")
        eliminar = clientes.pop(NIF)
        print(clientes, "\n")
    if menu == 3:
        NIF = input("Ud seleccionó mostrar cliente. Introduzca NIF del cliente: ")
        for element in clientes[NIF]:
            value = clientes[NIF].get(element)
            print (element,": ",value,"\n")
    if menu == 4:
        print ("Esta es la lista de clientes: ")
        for key in clientes:
            name = clientes[key].get("Nombre")
            print(key,":",name,"\n")
    if menu == 5:
        
    if menu == 6:
        break
        
        
  11 El directorio de los clientes de una empresa está organizado en una cadena de texto como la de más abajo, 
# donde cada línea contiene la información del nombre, email, teléfono, nif, y el descuento que se le aplica. 
# Las líneas se separan con el carácter de cambio de línea \n y la primera línea contiene los nombres de los 
# campos con la información contenida en el directorio.

# "nif;nombre;email;teléfono;descuento\n01234567L;Luis González;luisgonzalez@mail.com;656343576;12.5\n71476342J;Macarena Ramírez;macarena@mail.com;692839321;8\n63823376M;Juan José Martínez;juanjo@mail.com;664888233;5.2\n98376547F;Carmen Sánchez;carmen@mail.com;667677855;15.7"

# Escribir un programa que genere un diccionario con la información del directorio, donde cada elemento corresponda 
# a un cliente y tenga por clave su nif y por valor otro diccionario con el resto de la información del cliente.
#  Los diccionarios con la información de cada cliente tendrán como claves los nombres de los campos y como valores 
# la información de cada cliente correspondientes a los campos. Es decir, un diccionario como el siguiente

# {'01234567L': {'nombre': 'Luis González', 'email': 'luisgonzalez@mail.com', 'teléfono': '656343576', 'descuento': 12.5}, '71476342J': {'nombre': 'Macarena Ramírez', 'email': 'macarena@mail.com', 'teléfono': '692839321', 'descuento': 8.0}, '63823376M': {'nombre': 'Juan José Martínez', 'email': 'juanjo@mail.com', 'teléfono': '664888233', 'descuento': 5.2}, '98376547F': {'nombre': 'Carmen Sánchez', 'email': 'carmen@mail.com', 'teléfono': '667677855', 'descuento': 15.7}}


txt_chain = "nif;nombre;email;teléfono;descuento\n01234567L;Luis González;luisgonzalez@mail.com;656343576;12.5\n71476342J;Macarena Ramírez;macarena@mail.com;692839321;8\n63823376M;Juan José Martínez;juanjo@mail.com;664888233;5.2\n98376547F;Carmen Sánchez;carmen@mail.com;667677855;15.7"

listas = txt_chain.rsplit("\n")

Dict_output = {}

for element in listas[1::]:
    separador = element.rsplit(";")
    Nif = separador[0]
    Sub_Dict = {"nombre":separador[1],"email":separador[2],"teléfono":separador[3],"descuento":float(separador[4])}
    Dict_output[Nif] = Sub_Dict

print (Dict_output)

# AQUI OTRA MANERA:

txt_chain = "nif;nombre;email;teléfono;descuento\n01234567L;Luis González;luisgonzalez@mail.com;656343576;12.5\n71476342J;Macarena Ramírez;macarena@mail.com;692839321;8\n63823376M;Juan José Martínez;juanjo@mail.com;664888233;5.2\n98376547F;Carmen Sánchez;carmen@mail.com;667677855;15.7"

listas = txt_chain.rsplit("\n")

Campos = listas[0].split(";")

Dict_output = {}

for element in listas[1::]:
    valores = element.rsplit(";")
    subdict = {}
    Nif = valores[0]
    for i in range (1,int(len(valores))):
        subdict[Campos[i]]= valores[i]
    Dict_output[Nif] = subdict

print (Dict_output)

# 1 - Escribir una función que muestre por pantalla el saludo ¡Hola amiga! cada vez que se la invoque.

def Salute ():
    print ("¡Hola amiga!",end="...")
for i in range (0,4):
    Salute ()
print ("\n")

# 2 - Escribir una función a la que se le pase una cadena <nombre> y muestre por pantalla el saludo ¡hola <nombre>!.

def Saluda (nombre):
    print ("Hola {}".format(nombre))
Saluda ("Yakary")
Saluda ("Oliver")

# 3 - Escribir una función que reciba un número entero positivo y devuelva su factorial

def factorializa (number):
    result = 1
    for i in range (1,number+1):
        result = result*i                   # Otra opción sería result*= (i + 1), poniendo el range del for como: range(number)
    return (result)
print(factorializa(4)) 

# 4 - Escribir una función que calcule el total de una factura tras aplicarle el IVA. La función debe recibir 
# la cantidad sin IVA y el porcentaje de IVA a aplicar, y devolver el total de la factura.
#  Si se invoca la función sin pasarle el porcentaje de IVA, deberá aplicar un 21%

def tax (monto_sin_iva,IVA=21):                     # IVA = 21, es un argumento por defecto para la función. IMPORTANTE SABERLO
    total = (monto_sin_iva*IVA/100) + monto_sin_iva
    return total
print (tax(1000,10))
print (tax(1000))

# 5 - Escribir una función que calcule el área de un círculo y otra que calcule el volumen de un cilindro usando 
# la primera función.

def circle_area (radius):
    a_circle = 3.1416*radius**2
    return a_circle

def cylinder_volume (long,radius):                #parámetros: long y radius // argumentos: los valores que tomen long y radius
    volume = round(long*circle_area (radius),2)
    return volume

print (cylinder_volume (4,3))

# 6 - Escribir una función que reciba una muestra de números en una lista y devuelva su media.

def promedia (*args):      # el * indica que es un "args" o un número de argumentos desconocidos IMPORTANTE
    total = 0
    for i in args:
        total += i
    media = total/len(args)
    return media

print (promedia(5,10,20,1))

# Otra manera mas sencilla es usar el métdo sum(args), este totaliza la suma de todos los elementos de la lista
# sin necesidad de usar el for para sumar, quedando el programa así:     media = sum(arg)/len(arg)

# 7 - Escribir una función que reciba una muestra de números en una lista y devuelva otra lista con sus cuadrados.

def squares (*numbers):
    lista =[]
    for i in numbers:
        lista.append(i**2) 
    return lista

print (squares(2,4,3,1,5,6))

# 8 - Escribir una función que reciba una muestra de números en una lista y devuelva un diccionario con su media,
#  varianza y desviación típica.

def stadistics (*number_list):
    pre_varianza = 0
    media = sum(number_list)/len(number_list)
    for i in number_list:
        pre_varianza += (i-media)**2
    varianza = pre_varianza/(len(number_list)-1)
    desv_standar = round(varianza**0.5,2)
    Estadisticas = {"media":media,"varianza":varianza,"Deviación standar":desv_standar}
    return Estadisticas

print (stadistics(490,500,510,515,520))

# 1 - Escribir una función que muestre por pantalla el saludo ¡Hola amiga! cada vez que se la invoque.

from math import floor


def Salute ():
    print ("¡Hola amiga!",end="...")
for i in range (0,4):
    Salute ()
print ("\n")

# 2 - Escribir una función a la que se le pase una cadena <nombre> y muestre por pantalla el saludo ¡hola <nombre>!.

def Saluda (nombre):
    print ("Hola {}".format(nombre))
Saluda ("Yakary")
Saluda ("Oliver")

# 3 - Escribir una función que reciba un número entero positivo y devuelva su factorial

def factorializa (number):
    result = 1
    for i in range (1,number+1):
        result = result*i                   # Otra opción sería result*= (i + 1), poniendo el range del for como: range(number)
    return (result)
print(factorializa(4)) 

# 4 - Escribir una función que calcule el total de una factura tras aplicarle el IVA. La función debe recibir 
# la cantidad sin IVA y el porcentaje de IVA a aplicar, y devolver el total de la factura.
#  Si se invoca la función sin pasarle el porcentaje de IVA, deberá aplicar un 21%

def tax (monto_sin_iva,IVA=21):                     # IVA = 21, es un argumento por defecto para la función. IMPORTANTE SABERLO
    total = (monto_sin_iva*IVA/100) + monto_sin_iva
    return total
print (tax(1000,10))
print (tax(1000))

# 5 - Escribir una función que calcule el área de un círculo y otra que calcule el volumen de un cilindro usando 
# la primera función.

def circle_area (radius):
    a_circle = 3.1416*radius**2
    return a_circle

def cylinder_volume (long,radius):                #parámetros: long y radius // argumentos: los valores que tomen long y radius
    volume = round(long*circle_area (radius),2)
    return volume

print (cylinder_volume (4,3))

# 6 - Escribir una función que reciba una muestra de números en una lista y devuelva su media.

def promedia (*args):      # el * indica que es un "args" o un número de argumentos desconocidos IMPORTANTE
    total = 0
    for i in args:
        total += i
    media = total/len(args)
    return media

print (promedia(5,10,20,1))

# Otra manera mas sencilla es usar el métdo sum(args), este totaliza la suma de todos los elementos de la lista
# sin necesidad de usar el for para sumar, quedando el programa así:     media = sum(arg)/len(arg)

# 7 - Escribir una función que reciba una muestra de números en una lista y devuelva otra lista con sus cuadrados.

def squares (*numbers):
    lista =[]
    for i in numbers:
        lista.append(i**2) 
    return lista

print (squares(2,4,3,1,5,6))

# 8 - Escribir una función que reciba una muestra de números en una lista y devuelva un diccionario con su media,
#  varianza y desviación típica.

def stadistics (*number_list):
    pre_varianza = 0
    media = sum(number_list)/len(number_list)
    for i in number_list:
        pre_varianza += (i-media)**2
    varianza = pre_varianza/(len(number_list)-1)
    desv_standar = round(varianza**0.5,2)
    Estadisticas = {"media":media,"varianza":varianza,"Deviación standar":desv_standar}
    return Estadisticas

print (stadistics(490,500,510,515,520))

# 9 - Escribir una función que calcule el máximo común divisor de dos números y 
# otra que calcule el mínimo común múltiplo.

def divisores (num):            # Esta función encuentra los divisores al descomponer el número "num"
    list_divisors = []
    i = 2
    while i<= num:
        if num%i == 0:
            list_divisors.append(i)
            num = num/i
            i = 2
        else:
            i += 1
    return list_divisors

print (divisores(24))
print (divisores(36))


def mcm (num1,num2):                        # funcion para sacar el minimo comun multiplo entre 2 numeros
    list_def = []                           # En esta lista se pretende queden los comunes y no comunes con su mayor exponente
    list1 = divisores (num1)                # Se crea una lista 1 con los divisores del numero 1
    list2 = divisores (num2)                # Y una lista 2 con los divisores para el numero 2

    lista_total = list1 + list2             # se crea una lista total para, a partir de esta, poder comparar lista 1 con lista 2
    lista_total_def = []                    # a la misma lista total le eliminamos los elementos repetidos para no comparar repetidos
    for element in lista_total:             # con este ciclo for se eliminan elementos repetidos
        if element not in lista_total_def:
            lista_total_def.append(element) # lista definitiva con una sola muestra de cada divisor encontrado 

    for i in lista_total_def:                         # ahora con esta lista definitiva, iteraremos para ver cuantas veces esta en la lista 1 y en la lista 2 (comunes con mayor exponente)
        veces1 = list1.count(i)
        veces2 = list2.count(i)
        if veces1 >= veces2:                           # si esta mas veces en la lista1 se agrega, elevado a i veces (i**veces1)
            list_def.append(i**veces1)                 # se agrega resultado a list_def
        if veces2 > veces1:                            # si esta mas veces en lista 2 se procede de la misma manera
            list_def.append(i**veces2)
    m_c_m = 1
    for element in list_def:                           # por ultimo, para sacar el mcm se multiplican los elementos de list_def
        m_c_m *= element
    return m_c_m                                       # la función retorna el mcm

print (mcm (24,36))

# 10 - Escribir una función que convierta un número decimal en binario y otra que convierta un número binario en decimal

def par_o_impar (num):
    if num%2 == 0:
        num = "par"
    else:
        num = "impar"
    return num

def dec_to_bin (num):
    list_bin =[]
    while num>1:
        rest = par_o_impar (floor(num))
        if rest == "par":
            list_bin.append ("0")
        if rest == "impar":
            list_bin.append ("1")
        num /= 2
    list_bin = list_bin[::-1]                # una de las formas de invertir la lista generada, que se forma alreves, tambien sirve el metodo reversed
    list_bin = "".join(list_bin)
    return list_bin

print (dec_to_bin (79))
print (dec_to_bin (28))

def bin_to_dec (num):                  #Función que transforma de binario a decimal
    num = str(num)                     # Aqui lo llevé a string para poder iterar en el for, pero tambien sirve llevarlo a una lista
    result = 0
    multiple = 1
    for i in num[::-1]:
        if i == "1":
            if result == 0:
                result += 1
            else:
                multiple *= 2
                result += multiple
        else:
            multiple*= 2
        print (result)
    return result

print(bin_to_dec(1001111))

# otra manera mejor

def bin_to_dec2 (num):                  #Función que transforma de binario a decimal
    num = str(num)
    num = num[::-1]
    exponent = 0
    resultado = 0
    for i in num:
        resultado += (int(i)*(2**exponent))
        exponent += 1
        print (resultado)
    return resultado

print (bin_to_dec2(1001111))

# 11 - Escribir un programa que reciba una cadena de caracteres y devuelva un diccionario con cada palabra 
# que contiene y su frecuencia. Escribir otra función que reciba el diccionario generado con la función 
# anterior y devuelva una tupla con la palabra más repetida y su frecuencia.

cadena = input("Ingrese un escrito\n")

def frecuencia_palabras (escrito):          # función que determina la frecuencia de cada palabra en un escrito
    diccionario = {}                        # se crea el diccionario vacio donde se introducirán las palabras y frecuencia
    escrito = escrito.replace(".","")       # se eliminan puntos y comas
    escrito = escrito.replace(",","")
    word_list = escrito.split(" ")          # se crea una lista con todas las palabras usando el split con espacio: " "
    for element in word_list:               # para cada palabra en la lista...
        counter = 0
        for i in range(len(word_list)):     # se realiza un bucle a travez de cada indice para comparar... 
            if element == word_list[i]:     # ...si el elemento (palabra) es igual al del indice
                counter += 1                # por cada vez que coincida se suma 1 al contador
        diccionario[element] = counter      # luego se crea un elemento del diccionario: key = element, value = counter
    return diccionario                      # la salida de la función es un diccionario con cada palabra y el número de veces
    
print(frecuencia_palabras(cadena))

# la funcion frecuencia_palabras, cuando pasa por alguna palabra repetida vuelve a contarla y sustituye por el nuevo resultado
# que a fin de cuentas es el mismo, por este motivo no afecta en nada, ya que en el diccionario creado se verá
# reflejada la palabra una sola vez con la frecuencia correspondiente, producto de la ultima aparcion de la palabra en el escrito

def whosemost (diccionario_entrada):
    keys = diccionario_entrada.keys()
    mayor = 0
    for element in keys:
        if diccionario_entrada[element]>mayor:
            mayor = diccionario_entrada[element]
            tupla = (element,mayor)
        else:
            tupla = tupla
    return tupla

print (whosemost(frecuencia_palabras(cadena)))

# this last represents a example where there is a function into another function




# 1 - Escribir una función que aplique un descuento a un precio y otra que aplique el IVA a un precio. 
# Escribir una tercera función que reciba un diccionario con los precios y porcentajes de una cesta de la compra, 
# y una de las funciones anteriores, y utilice la función pasada para aplicar los descuentos o el IVA 
# a los productos de la cesta y devolver el precio final de la cesta.

from math import cos, sin, tan, log, exp


def discount (monto,descuento):
    precio = monto - monto*(descuento/100)
    return precio

def IVA (monto,impuesto):
    precio = monto + monto*(impuesto/100)
    return precio 

def compra (dic_cesta,funcion):
    precio_final = 0
    keys = dic_cesta.keys()
    for element in keys:
        precio_final += funcion(element,dic_cesta[element])
    return precio_final

cesta_compra1 = {3000:10,4000:10,2000:10,1000:10}
cesta_compra2 = {3000:25,4000:25,2000:25,1000:25}

print (compra(cesta_compra1,discount))
print (compra(cesta_compra2,IVA))

# 2 - Escribir una función que simule una calculadora científica que permita calcular el seno, coseno, tangente,
#  exponencial y logaritmo neperiano. La función preguntará al usuario el valor y la función a aplicar,
#  y mostrará por pantalla una tabla con los enteros de 1 al valor introducido y el resultado de aplicar
#  la función a esos enteros.

def calculator ():
    funcion = (input("introduce la función a aplicar: sin, cos, tan, exp, log: "))
    value = (int(input("introduce un valor entero positivo: ")))

    resultados = calculus(funcion,value)
    keys = resultados.keys()
    for element in keys:
        print ("{:<5} {:<5}".format(element,calculus(funcion,value)[element]))

def calculus (funcion,value):
    functions = {"sin":sin, "cos":cos, "tan":tan, "log":log, "exp":exp}
    Result ={}
    for i in range (1,value +1):
        Result[i] = functions[funcion](i)
    return Result
        
calculator ()
